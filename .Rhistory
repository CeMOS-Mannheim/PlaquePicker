# get mzValues of IonImages
mzVal <- get_mzValues(pp)[mzIdx]
PlaqueIDs_venn <- vector("list",
length = length(mzIdx))
for(i in 1:length(mzIdx)) {
switch(method,
"plaque" = {
PlaqueIDs_venn[[i]] <- pp[[mzIdx[i]]]$binMat * unified
PlaqueIDs_venn[[i]] <- PlaqueIDs_venn[[i]] %>%
as.vector() %>%
unique() %>%
na.omit() %>%
sort() %>%
.[-1]
},
"pixel" = {
PlaqueIDs_venn[[i]] <- unlist(pp[[mzIdx[i]]]$spectraIdx)
})
}
if(!is.null(mzNames)) {
names(PlaqueIDs_venn) <- mzNames
} else {
names(PlaqueIDs_venn) <- mzVal
}
venn <- Vennerable::Venn(PlaqueIDs_venn)
if(relative) {
l <- length(mzIdx)+1
venn@IndicatorWeight[,l] <-
round(venn@IndicatorWeight[,l]/sum(venn@IndicatorWeight[,l]),3) * 100
}
if(!plot) {
return(venn)
}
plot(venn)
}
plot_venn(pp, mzIdx = c(2:3), method = "pixel")
plot_venn(pp, mzIdx = c(1:3), method = "pixel")
#'
#' @param pp       plaquePicker result list
#' @param mzIdx    integer vector, indicies of mz values. To get an overview of mz values try \code{get_mzValues()}. Can not be longer then 3.
#' @param mzNames  character vector, names of mz values (e.g. "ABeta1-38"). If set to NULL (default) the mz values themself will be used as names during plotting.
#' @param plot     logical, if set to FALSE the \code{Venn} object is returned.
#' @param method   character, if set to "plaque" the Venn diagram will be based on overlapping signals per plaque. If set to "pixel" then it will be pixel-wise.
#' @param relative logical, if set to false the number of plaques is returned instead of the percentage.
#'
#'
#' @export
plot_venn <- function(pp, mzIdx = 1:3, mzNames =NULL, plot = TRUE, method = c("plaque", "pixel"), relative = TRUE) {
method = match.arg(method)
if(!require(Vennerable)) {
stop("To use this function the package 'Vennerable' is needed.\n
Install it using devtools::install_github('js229/Vennerable')")
}
if(!is.null(mzNames)) {
if(!length(mzNames) == length(mzIdx)) {
stop("mzNames must be either NULL or same lenght as mzIdx\n")
}
}
# extract matrix of unified plaque IDs
unified <- pp$unified$uniComp
# get mzValues of IonImages
mzVal <- get_mzValues(pp)[mzIdx]
PlaqueIDs_venn <- vector("list",
length = length(mzIdx))
for(i in 1:length(mzIdx)) {
switch(method,
"plaque" = {
PlaqueIDs_venn[[i]] <- pp[[mzIdx[i]]]$binMat * unified
PlaqueIDs_venn[[i]] <- PlaqueIDs_venn[[i]] %>%
as.vector() %>%
unique() %>%
na.omit() %>%
sort() %>%
.[-1]
},
"pixel" = {
PlaqueIDs_venn[[i]] <- unlist(pp[[mzIdx[i]]]$spectraIdx)
})
}
if(!is.null(mzNames)) {
names(PlaqueIDs_venn) <- mzNames
} else {
names(PlaqueIDs_venn) <- mzVal
}
venn <- Vennerable::Venn(PlaqueIDs_venn)
if(relative) {
l <- length(mzIdx)+1
venn@IndicatorWeight[,l] <-
round(venn@IndicatorWeight[,l]/sum(venn@IndicatorWeight[,l]),3) * 100
}
if(!plot) {
return(venn)
}
plot(venn)
}
plot_venn(pp, mzIdx = c(1:3), method = "pixel")
install.packages("viridis")
knitr::opts_chunk$set(dpi=600,fig.width=8)
suppressPackageStartupMessages({
library(PlaquePicker)
library(MALDIquant)        # general MS functions
library(MALDIquantForeign) # for import of imzML data
library(tidyverse)         # general data science tools
library(viridis)           # pretty colors for ion images
# for the plotting of Venn-Diagrams we will be using the package Vennerable
# which is not in the CRAN repository and has some dependencies to the
# BioConductor repository. To install Vennerable and its dependencies
# use the following commands:
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(version = "3.11")
# BiocManager::install("RBGL")
# BiocManager::install("graph")
# devtools::install_github("js229/Vennerable")
library(Vennerable)})
suppressPackageStartupMessages({
library(PlaquePicker)
library(MALDIquant)        # general MS functions
library(MALDIquantForeign) # for import of imzML data
library(tidyverse)         # general data science tools
library(viridis)           # pretty colors for ion images
# for the plotting of Venn-Diagrams we will be using the package Vennerable
# which is not in the CRAN repository and has some dependencies to the
# BioConductor repository. To install Vennerable and its dependencies
# use the following commands:
#
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install(version = "3.11")
# BiocManager::install("RBGL")
# BiocManager::install("graph")
# devtools::install_github("js229/Vennerable")
library(Vennerable)})
# unzip spectra
unzip("data-raw/NLGF67w_mouse1_rep1.zip",
files = "data-raw/unzipped/")
# read spectra
spec <- importImzMl("data-raw/unzipped/NLGF_Prot_NLGF1.imzML",
verbose = FALSE)
# unzip spectra
unzip("data-raw/NLGF67w_mouse1_rep1.zip")
# read spectra
spec <- importImzMl("data-raw/unzipped/NLGF_Prot_NLGF1.imzML",
verbose = FALSE)
# unzip spectra
unzip("data-raw/NLGF67w_mouse1_rep1.zip")
# read spectra
spec <- importImzMl("NLGF_Prot_NLGF1.imzML",
verbose = FALSE)
# tidy up
file.remove("NLGF_Prot_NLGF1.imzML")
file.remove("NLGF_Prot_NLGF1.idb")
file.remove("NLGF_Prot_NLGF1.ibd")
spec <- calibrateIntensity(spec,
method = "TIC")
# small halfWindowSize needed as number of points
# per spectra reduced for smaller example datasets
spec <- smoothIntensity(spec,
method = "SavitzkyGolay",
halfWindowSize = 2)
spec <- removeBaseline(spec,
method = "TopHat")
avgSpec <- averageMassSpectra(spec)
install.packages("viridis")
# shorten filepath (for plotting reasons only)
avgSpec@metaData$file <- basename(avgSpec@metaData$file)
plot(avgSpec, ylab = "Intensity [a.u.]")
lines(detectPeaks(avgSpec))
labelPeaks(detectPeaks(avgSpec),
digits = 0)
install.packages("viridis")
ionImages <- msiSlices(spec,
center = c(4059,
4160,
4442),
tolerance = 5)
par(mfrow = c(1, 3), mar =c(0,0,0,0))
image(qcor(ionImages[,,1], 0.9995),
col = viridis::cividis(30),
asp = 1,
axes = FALSE)
title("Ab1-38Arc", line = -2)
image(qcor(ionImages[,,2], 0.9995),
col = viridis::cividis(30),
asp = 1,
axes = FALSE)
title("Ab1-39Arc", line = -2)
image(qcor(ionImages[,,3], 0.9995),
col = viridis::cividis(30),
asp = 1,
axes = FALSE)
title("Ab1-42Arc", line = -2)
hist(ionImages[,,1],
breaks = 300,
xlab = "Intensity [a.u.]",
main = "Histogram of Ab1-38Arc intensity")
thresh_Ab38 <- tpoint(ionImages[,,1], plot = TRUE)
bin <- ifelse(test = thresh_Ab38 < as.vector(ionImages[,,1]),
yes = 1,
no = ifelse(is.na(as.vector(ionImages[,,1])),
yes = NA,
no = 0))
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,1])[1],
ncol = dim(ionImages[,,1])[2])
par(mfrow = c(1, 2), mar = c(0,0,0,0))
image(qcor(ionImages[,,1], 0.9999),
col = viridis::cividis(30),
asp = 1,
axes = FALSE)
title("Ab1-38Arc intensities", line = -1)
image(binMat,
col = c("black", "white"),
asp = 1,
axes = FALSE)
title("Ab1-38Arc binarized", line = -1)
plaqueAvg <- averageMassSpectra(spec[get_IdxFromID(pp, ID = NA)))])
# first extract the MALDIquant indicies assosiated with plaque
idx <- get_IdxFromID(pp, ID = NA) # setting ID to NA will extract all IDs instead of specific IDs
# compute average spectrum of plaque assosiated pixels
plaqueAvg <- averageMassSpectra(spec[idx])
# shorten filepath (for plotting reasons only)
plaqueAvg@metaData$file <- basename(plaqueAvg@metaData$file)
plot(plaqueAvg,
ylab = "Intensity [a.u.]")
lines(avgSpec,
lty=2)
labelPeaks(detectPeaks(plaqueAvg),
digits = 0)
lines(detectPeaks(plaqueAvg))
legend("right",
legend=c("Plaque avg. spectrum","Overall avg. spectrum"),
lty=1:2,
cex=0.8)
# first extract the MALDIquant indicies assosiated with plaque
idx <- get_IdxFromID(pp, ID = NA) # setting ID to NA will extract all IDs instead of specific IDs
# compute average spectrum of plaque assosiated pixels
plaqueAvg <- averageMassSpectra(spec[idx])
# shorten filepath (for plotting reasons only)
plaqueAvg@metaData$file <- basename(plaqueAvg@metaData$file)
plot(plaqueAvg,
ylab = "Intensity [a.u.]")
lines(avgSpec,
lty=2)
labelPeaks(detectPeaks(plaqueAvg),
digits = 0)
lines(detectPeaks(plaqueAvg))
legend("right",
legend=c("Plaque avg. spectrum","Overall avg. spectrum"),
lty=1:2,
cex=0.8)
# first extract the MALDIquant indicies assosiated with plaque
idx <- get_IdxFromID(pp, ID = NA) # setting ID to NA will extract all IDs instead of specific IDs
# compute average spectrum of plaque assosiated pixels
plaqueAvg <- averageMassSpectra(spec[idx])
# shorten filepath (for plotting reasons only)
plaqueAvg@metaData$file <- basename(plaqueAvg@metaData$file)
plot(plaqueAvg,
ylab = "Intensity [a.u.]")
lines(avgSpec,
lty=2)
labelPeaks(detectPeaks(plaqueAvg),
digits = 0)
lines(detectPeaks(plaqueAvg))
legend("right",
legend=c("Plaque avg. spectrum","Overall avg. spectrum"),
lty=1:2,
cex=0.8)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = FALSE)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = TRUE)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = TRUE,
method = "pixel")
View(pp)
bind_rows(pp$unified$intensities, .id = "ID")
bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400)
bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400) %>%
gather(mz, int, -size, -ID)
df <-bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400) %>%
gather(mz, int, -size, -ID)
head(df)
df <-bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400)
View(df)
df <-bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400)
head(df)
ggplot(df, aes(x = size)) + geom_histogram() + scale_x_log10()
ggplot(df, aes(x = size)) + geom_histogram()  + theme_bw()
ggplot(df, aes(x = size)) +
geom_histogram(binwidth = 2) +
theme_bw()
ggplot(df, aes(x = size)) +
geom_histogram(binwidth = 5) +
theme_bw()
ggplot(df, aes(x = size)) +
geom_histogram(bins = 100) +
theme_bw()
ggplot(df, aes(x = size)) +
geom_histogram(bins = 50) +
theme_bw()
ggplot(df, aes(x = size)) +
geom_histogram(bins = 50) +
theme_bw() +
labs(x = "Plaque area [um²]")
df <- df %>%
group_by(ID) %>%
mutate(sizeGroup = ifelse(size <= 400, "small",
ifelse(size <= 2000, "medium", "big")))
df
df <-bind_rows(pp$unified$intensities, .id = "ID") %>%
group_by(ID) %>%
mutate(size = n() * 400)
head(df)
df_size <- df %>%
group_by(ID) %>%
mutate(sizeGroup = ifelse(size <= 400, "small",
ifelse(size <= 2000, "medium", "big")))
df_size %>% summary()
df_size %>% group_by(sizeGroup, ID) %>% summarise(n = n())
df_size <- df %>%
group_by(ID) %>%
mutate(sizeGroup = ifelse(size <= 400, "small",
ifelse(size <= 2000, "medium", "big")))
df_size %>% group_by(sizeGroup) %>% summarise(n = length(unique(ID)))
df_size %>%
ungroup() %>%
mutate(mz = fct_recode(mz,
"Ab1-38Arc" = "4059",
"Ab1-39Arc" = "4160",
"Ab1-42Arc" = "4442"))
df_size
df_size %>%
ungroup() %>%
rename("Ab1-38Arc" = "4059.9",
"Ab1-39Arc" = "4159.1",
"Ab1-42Arc" = "4442.6")
df_size %>%
ungroup() %>%
rename("Ab1_38Arc" = "4059.9",
"Ab1_39Arc" = "4159.1",
"Ab1_42Arc" = "4442.6") %>%
mutate(ratio = Ab1_42Arc/Ab1_38Arc)
df_size %>%
ungroup() %>%
rename("Ab1_38Arc" = "4059.9",
"Ab1_39Arc" = "4159.1",
"Ab1_42Arc" = "4442.6") %>%
mutate(ratio = Ab1_42Arc/Ab1_38Arc) %>%
ggplot(aes(x = sizeGroup, y = ratio)) +
geom_boxplot()
df_size %>%
ungroup() %>%
rename("Ab1_38Arc" = "4059.9",
"Ab1_39Arc" = "4159.1",
"Ab1_42Arc" = "4442.6") %>%
mutate(ratio = Ab1_42Arc/Ab1_38Arc) %>%
ggplot(aes(x = sizeGroup, y = ratio)) +
geom_boxplot() +
scale_y_log10() +
theme_bw() +
labs(x = "Size Group",
y = "Ratio Ab1-42Arc/Ab1-38Arc")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("igraph")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("installr")
library(installr)
installr()
install.packages("ymlthis")
install.packages("yaml")
install.packages("stringr")
install.packages("tidyr")
install.packages("tidyverse")
install.packages("magrittr")
install.packages("R6")
install.packages("generics")
install.packages("pkgconfig")
install.packages("purrr")
install.packages("scales")
install.packages("LEANR")
install.packages("learnr")
install.packages("munsell")
install.packages("Rcpp")
install.packages("MALDIquantForeign")
install.packages("readMzXmlData")
install.packages("XML")
install.packages("XML")
install.packages("XML")
devtools::install_github("js229/Vennerable")
install.packages(memoise)
install.packages("memoise")
install.packages(memoise)
devtools::install_github("js229/Vennerable")
install.packages("pkgbuild")
devtools::install_github("js229/Vennerable")
install.packages("processx")
devtools::install_github("js229/Vennerable")
install.packages("ps")
devtools::install_github("js229/Vennerable")
install.packages("prettyunits")
devtools::install_github("js229/Vennerable")
install.packages("pkgload")
devtools::install_github("js229/Vennerable")
install.packages(withr)
install.packages("withr")
devtools::install_github("js229/Vennerable")
install.packages("desc")
devtools::install_github("js229/Vennerable")
install.packages("rprojroot")
devtools::install_github("js229/Vennerable")
install.packages("remotes")
devtools::install_github("js229/Vennerable")
install.packages("sessioninfo")
devtools::install_github("js229/Vennerable")
devtools::install_github("js229/Vennerable", force = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install(version = "3.11")
BiocManager::install(version = "3.11")
BiocManager::install(version = "3.11")
install.packages("fs")
install.packages("fs")
BiocManager::install(version = "3.11")
BiocManager::install(version = "3.11")
BiocManager::install("RBGL")
BiocManager::install("RBGL")
BiocManager::install("RBGL")
BiocManager::install("RBGL")
install.packages("survival")
BiocManager::install("RBGL")
BiocManager::install("graph")
devtools::install_github("js229/Vennerable")
devtools::install_github("js229/Vennerable", force = TRUE)
install.packages("RColorBrewer")
devtools::install_github("js229/Vennerable", force = TRUE)
install.packages("readBrukerFlexData")
install.packages("readr")
install.packages("viridisLite")
install.packages("viridis")
install.packages("gridExtra")
install.packages("labeling")
install.packages("igraph")
library(Vennerable)
devtools::document()
rm(plot_venn())
rm(plot_venn)
devtools::document()
knitr::opts_chunk$set(dpi=600,fig.width=8)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = FALSE)
library(PlaquePicker)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = FALSE)
debugonce(plot_venn)
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = FALSE)
Vennerable::Venn(PlaqueIDs_venn)
plot(venn)
devtools::load_all()
plot_venn(pp, mzNames = c("Ab1-38Arc",
"Ab1-39Arc",
"Ab1-42Arc"),
relative = FALSE)
devtools::document()
library(PlaquePicker)
knitr::opts_chunk$set(dpi=600,fig.width=8)
ggplot(df, aes(x = size)) +
geom_histogram(bins = 50) +
theme_bw() +
labs(x = "Plaque area [um²]")
library(ggplot2)
ggplot(df, aes(x = size)) +
geom_histogram(bins = 50) +
theme_bw() +
labs(x = "Plaque area [um²]")
knit_with_parameters('~/R/plaquepicker/vignette.Rmd', encoding = 'UTF-8')
install.packages("utf8")
tinytex::install_tinytex()
tinytex:::is_tinytex()
