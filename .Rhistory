binMatrix = binMat,
coord = coord,
method = "tpoint")
View(pp)
dim(ionImages)
ii2 <- array(c(ionImages, ionImages))
dim(ii2)
ii2 <- array(c(ionImages, ionImages), dim = c(dim(ionImages)[c(1,2)], dim(ionImages)[3]*2))
dim(ii2)
image(ii2[,,3])
image(ii2[,,1])
image(ii2[,,4])
image(ii2[,,6])
#'     \code{threshold}    numeric, the threshold estimated by \code{tpoint}-function.
#'     \code{spectraIdx}   list of integer vectors containing the indecies of the spectra in the list of \code{MALDIquant::massObject}.
#' Also, there is another entry called \code{unified}: The result of all binarized ion images combined.
#'     In addition to \code{conComp}, \code{binMat}, and \code{spectraIdx} that contain the equivalent matrices of the unified data as described above this entry contains the following:
#'     \code{intensities}  list of lists containing the intensities of the corresponding pixels for the provided ion images
#'
#' @export
#'
#' @examples
#' pp <- plaquePicker(NLGF67w_mouse1_rep1, coord = NLGF67w_mouse1_rep1_coord)
plaquePicker <- function(ionImages, coord, method = c("tpoint", "geometric", "peak"), binMatrix = NULL, addIonImages = NULL, ...) {
if(!is.null(binMatrix)) {
# check if dimof ionImages and binMatrix match. Otherwise stop.
if(!dim(ionImages[,,1])[1] == dim(binMatrix)[1] & !dim(ionImages[,,1])[2] == dim(binMatrix)[2]) {
stop("Dimensions of binMatrix has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(binMatrix)\n")
}
method <- "binMat"
} else {
method <- match.arg(method)
}
if(!is.null(addIonImages)) {
# check if dim of ionImages and addIonImages match. Otherwise stop.
if(!dim(ionImages[,,1])[1] == dim(addIonImages)[1] & !dim(ionImages[,,1])[2] == dim(addIonImages)[2]) {
stop("Dimensions of addIonImages has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(addIonImages)\n")
}
}
mzValues <- attr(ionImages, "center")
resultList <- vector("list", length = length(mzValues)+1)
# empty matrix for storage of unified binary image
uni <- matrix(data = 0, nrow = dim(ionImages[,,1])[1],
ncol = dim(ionImages[,,1])[2])
# name cols and rows of uni
# according to the original coordinate system in MALDIQuant object
rownames(uni) <- sort(unique(coord[,1])) # x
colnames(uni) <- sort(unique(coord[,2])) # y
for(i in 1:length(mzValues)) {
cat("processing", mzValues[i], i , "/", length(mzValues) ,"\n")
# get threshold and perform binarization
ints <- as.vector(ionImages[,,i])
switch(method,
"tpoint" = {
threshold <- tpoint(ints, ...)
cat("\n threshold of mz", mzValues[i],"based on t-point thresholding = ", threshold, "\n")
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"geometric" = {
threshold <- geometricThreshold(ints, ...)
cat("\n threshold of mz", mzValues[i],"based on geometric thresholding = ", threshold, "\n")
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"peak" = {
cat("\n no threshold needed for mz", mzValues[i],"data considered as peaks\n")
bin <- ifelse(test = ints > 0,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
threshold <- -Inf
},
"binMat" = {
cat("\n no threshold needed for mz", mzValues[i],"binMatrix used for segmentation\n")
bin <- binMatrix
threshold <- -Inf
}
)
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,i])[1],
ncol = dim(ionImages[,,i])[2])
# perfrom connceted component labeling
conComp <- raster::as.matrix(raster::clump(raster::raster(binMat),
direction = 8))
# name cols and rows of conComp
# according to the original coordinate system in MALDIQuant object
rownames(conComp) <- sort(unique(coord[,1])) # x
colnames(conComp) <- sort(unique(coord[,2])) # y
resultList[[i]][["conComp"]] <- conComp
resultList[[i]][["binMat"]] <- binMat
resultList[[i]][["threshold"]] <- threshold
cat("extracting clump information...\n")
resultList[[i]][["spectraIdx"]] <- get_specIdx(comp = conComp, coord = coord)
# add binMat to unified binary image
uni <- uni + binMat
uni[uni > 0] <- 1
}
resultList[[length(resultList)]][["uniBin"]] <- uni
uniComp <- raster::as.matrix(raster::clump(raster::raster(uni),
direction = 8))
# name cols and rows of uniComp
rownames(uniComp) <- rownames(uni)
colnames(uniComp) <- colnames(uni)
resultList[[length(resultList)]][["uniComp"]] <- uniComp
cat("extracting unified clump information...\n")
resultList[[length(resultList)]][["spectraIdx"]] <- get_specIdx(comp = uniComp, coord = coord)
names(resultList) <- c(mzValues, "unified")
if(!is.null(addIonImages)) {
} else {
d <- dim(ionImages)
allIonImages <- array(data = c(ionImages, addIonImages), dim = c(d[1:2], d[3]*2))
resultList[[length(resultList)]][["intensities"]] <- get_intensities(comp = uniComp, ii = allIonImages)
}
return(resultList)
}
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
source('W:/1-DrArbeitPhD/1 - phd/32-Thomas Enzlein/Paper contributions/Enzlein 2020/mousemodels_series/R/PlaquePicker0.1/PlaquePicker/R/plaquePicker.R', echo=TRUE)
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
View(pp)
#'     \code{threshold}    numeric, the threshold estimated by \code{tpoint}-function.
#'     \code{spectraIdx}   list of integer vectors containing the indecies of the spectra in the list of \code{MALDIquant::massObject}.
#' Also, there is another entry called \code{unified}: The result of all binarized ion images combined.
#'     In addition to \code{conComp}, \code{binMat}, and \code{spectraIdx} that contain the equivalent matrices of the unified data as described above this entry contains the following:
#'     \code{intensities}  list of lists containing the intensities of the corresponding pixels for the provided ion images
#'
#' @export
#'
#' @examples
#' pp <- plaquePicker(NLGF67w_mouse1_rep1, coord = NLGF67w_mouse1_rep1_coord)
plaquePicker <- function(ionImages, coord, method = c("tpoint", "geometric", "peak"), binMatrix = NULL, addIonImages = NULL, ...) {
if(!is.null(binMatrix)) {
# check if dimof ionImages and binMatrix match. Otherwise stop.
if(!dim(ionImages[,,1])[1] == dim(binMatrix)[1] & !dim(ionImages[,,1])[2] == dim(binMatrix)[2]) {
stop("Dimensions of binMatrix has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(binMatrix)\n")
}
method <- "binMat"
} else {
method <- match.arg(method)
}
if(!is.null(addIonImages)) {
# check if dim of ionImages and addIonImages match. Otherwise stop.
if(!dim(ionImages[,,1])[1] == dim(addIonImages)[1] & !dim(ionImages[,,1])[2] == dim(addIonImages)[2]) {
stop("Dimensions of addIonImages has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(addIonImages)\n")
}
}
mzValues <- attr(ionImages, "center")
resultList <- vector("list", length = length(mzValues)+1)
# empty matrix for storage of unified binary image
uni <- matrix(data = 0, nrow = dim(ionImages[,,1])[1],
ncol = dim(ionImages[,,1])[2])
# name cols and rows of uni
# according to the original coordinate system in MALDIQuant object
rownames(uni) <- sort(unique(coord[,1])) # x
colnames(uni) <- sort(unique(coord[,2])) # y
for(i in 1:length(mzValues)) {
cat("processing", mzValues[i], i , "/", length(mzValues) ,"\n")
# get threshold and perform binarization
ints <- as.vector(ionImages[,,i])
switch(method,
"tpoint" = {
threshold <- tpoint(ints, ...)
cat("\n threshold of mz", mzValues[i],"based on t-point thresholding = ", threshold, "\n")
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"geometric" = {
threshold <- geometricThreshold(ints, ...)
cat("\n threshold of mz", mzValues[i],"based on geometric thresholding = ", threshold, "\n")
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"peak" = {
cat("\n no threshold needed for mz", mzValues[i],"data considered as peaks\n")
bin <- ifelse(test = ints > 0,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
threshold <- -Inf
},
"binMat" = {
cat("\n no threshold needed for mz", mzValues[i],"binMatrix used for segmentation\n")
bin <- binMatrix
threshold <- -Inf
}
)
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,i])[1],
ncol = dim(ionImages[,,i])[2])
# perfrom connceted component labeling
conComp <- raster::as.matrix(raster::clump(raster::raster(binMat),
direction = 8))
# name cols and rows of conComp
# according to the original coordinate system in MALDIQuant object
rownames(conComp) <- sort(unique(coord[,1])) # x
colnames(conComp) <- sort(unique(coord[,2])) # y
resultList[[i]][["conComp"]] <- conComp
resultList[[i]][["binMat"]] <- binMat
resultList[[i]][["threshold"]] <- threshold
cat("extracting clump information...\n")
resultList[[i]][["spectraIdx"]] <- get_specIdx(comp = conComp, coord = coord)
# add binMat to unified binary image
uni <- uni + binMat
uni[uni > 0] <- 1
}
resultList[[length(resultList)]][["uniBin"]] <- uni
uniComp <- raster::as.matrix(raster::clump(raster::raster(uni),
direction = 8))
# name cols and rows of uniComp
rownames(uniComp) <- rownames(uni)
colnames(uniComp) <- colnames(uni)
resultList[[length(resultList)]][["uniComp"]] <- uniComp
cat("extracting unified clump information...\n")
resultList[[length(resultList)]][["spectraIdx"]] <- get_specIdx(comp = uniComp, coord = coord)
names(resultList) <- c(mzValues, "unified")
if(!is.null(addIonImages)) {
d <- dim(ionImages)
allIonImages <- array(data = c(ionImages, addIonImages), dim = c(d[1:2], d[3]*2))
resultList[[length(resultList)]][["intensities"]] <- get_intensities(comp = uniComp, ii = allIonImages)
} else {
resultList[[length(resultList)]][["intensities"]] <- get_intensities(comp = uniComp, ii = ionImages)
}
return(resultList)
}
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
debugonce(get_intensities)
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
source('W:/1-DrArbeitPhD/1 - phd/32-Thomas Enzlein/Paper contributions/Enzlein 2020/mousemodels_series/R/PlaquePicker0.1/PlaquePicker/R/plaquePicker.R', echo=TRUE)
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
View(pp)
debugonce(get_intensities)
pp <- plaquePicker(ionImages = ionImages,
addIonImages = ionImages[,,1],
coord = coord,
method = "tpoint")
d <- dim(ionImages)
allIonImages <- array(data = c(ionImages, ionImages[,,1]), dim = c(d[1:2], d[3]*2))
attr(allIonImages, "center")
attr(ionImages, "center")
attr(ionImages[,,1], "center")
add <- ionImages[,,1:2]
attr(add, "center") <- attr(ionImages, "center")[1:2]
attr(add, "center")
pp <- plaquePicker(ionImages = ionImages,
addIonImages = add,
coord = coord,
method = "tpoint")
View(pp)
View(pp)
file.remove("NLGF_Prot_NLGF1.imzML")
file.remove("NLGF_Prot_NLGF1.ibd")
library(PlaquePicker)
library(PlaquePicker)
library(PlaquePicker)
library(PlaquePicker)
library(PlaquePicker)
devtools::document()
library(PlaquePicker)
debugonce(plaquePicker)
plaquePicker()
devtools::document()
library(PlaquePicker)
library(PlaquePicker)
devtools::document()
library(PlaquePicker)
devtools::document()
library(PlaquePicker)
data("NLGF67w_mouse1_rep1")
binarizeAndCombine <- function(im, method = c("tpoint", "geometric", "peak"), binMatrix) {
f(!is.null(binMatrix)) {
# check if dimof ionImages and binMatrix match. Otherwise stop.
if(!dim(im)[1] == dim(binMatrix)[1] & !dim(im)[2] == dim(im)[2]) {
stop("Dimensions of binMatrix has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(binMatrix)\n")
}
method <- "binMat"
} else {
method <- match.arg(method)
}
if(is.matrix(im)) {
z <- 1
} else {
z <- dim(im)[3]
}
uni <- matrix(data = 0, nrow = dim(im)[1],
ncol = dim(im)[2])
for(i in 1:z) {
if(is.matrix(im)) {
ints <- as.vector(im)
} else {
ints <- as.vector(im[,,i])
}
switch(method,
"tpoint" = {
threshold <- tpoint(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"geometric" = {
threshold <- geometricThreshold(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"peak" = {
bin <- ifelse(test = ints > 0,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
threshold <- -Inf
},
"binMat" = {
bin <- binMatrix
threshold <- -Inf
}
)
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,i])[1],
ncol = dim(ionImages[,,i])[2])
uni <- uni + binMat
uni[uni > 0] <- 1
}
return(uni)
}
binarizeAndCombine <- function(im, method = c("tpoint", "geometric", "peak"), binMatrix) {
if(!is.null(binMatrix)) {
# check if dimof ionImages and binMatrix match. Otherwise stop.
if(!dim(im)[1] == dim(binMatrix)[1] & !dim(im)[2] == dim(im)[2]) {
stop("Dimensions of binMatrix has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(binMatrix)\n")
}
method <- "binMat"
} else {
method <- match.arg(method)
}
if(is.matrix(im)) {
z <- 1
} else {
z <- dim(im)[3]
}
uni <- matrix(data = 0, nrow = dim(im)[1],
ncol = dim(im)[2])
for(i in 1:z) {
if(is.matrix(im)) {
ints <- as.vector(im)
} else {
ints <- as.vector(im[,,i])
}
switch(method,
"tpoint" = {
threshold <- tpoint(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"geometric" = {
threshold <- geometricThreshold(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"peak" = {
bin <- ifelse(test = ints > 0,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
threshold <- -Inf
},
"binMat" = {
bin <- binMatrix
threshold <- -Inf
}
)
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,i])[1],
ncol = dim(ionImages[,,i])[2])
uni <- uni + binMat
uni[uni > 0] <- 1
}
return(uni)
}
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
binarizeAndCombine <- function(im, method = c("tpoint", "geometric", "peak"), binMatrix = NULL) {
if(!is.null(binMatrix)) {
# check if dimof ionImages and binMatrix match. Otherwise stop.
if(!dim(im)[1] == dim(binMatrix)[1] & !dim(im)[2] == dim(im)[2]) {
stop("Dimensions of binMatrix has to be the same as ionImages! \n
!dim(ionImages[,,1]) == dim(binMatrix)\n")
}
method <- "binMat"
} else {
method <- match.arg(method)
}
if(is.matrix(im)) {
z <- 1
} else {
z <- dim(im)[3]
}
uni <- matrix(data = 0, nrow = dim(im)[1],
ncol = dim(im)[2])
for(i in 1:z) {
if(is.matrix(im)) {
ints <- as.vector(im)
} else {
ints <- as.vector(im[,,i])
}
switch(method,
"tpoint" = {
threshold <- tpoint(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"geometric" = {
threshold <- geometricThreshold(ints, ...)
bin <- ifelse(test = threshold < ints,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
},
"peak" = {
bin <- ifelse(test = ints > 0,
yes = 1,
no = ifelse(is.na(ints),
yes = NA,
no = 0))
threshold <- -Inf
},
"binMat" = {
bin <- binMatrix
threshold <- -Inf
}
)
# rebuild the matrix
binMat <- matrix(bin,
nrow = dim(ionImages[,,i])[1],
ncol = dim(ionImages[,,i])[2])
uni <- uni + binMat
uni[uni > 0] <- 1
}
return(uni)
}
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
library(PlaquePicker)
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
devtools::document()
library(PlaquePicker)
library(PlaquePicker)
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
library(PlaquePicker)
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
devtools::document()
rm(binarizeAndCombine())
rm(binarizeAndCombine
)
image(binarizeAndCombine(NLGF67w_mouse1_rep1))
image(binarizeAndCombine(NLGF67w_mouse1_rep1), method ="geometric")
image(binarizeAndCombine(NLGF67w_mouse1_rep1, method ="geometric"))
image(binarizeAndCombine(NLGF67w_mouse1_rep1, method ="tpoint"))
a <- binarizeAndCombine(NLGF67w_mouse1_rep1, method ="tpoint")
image(binarizeAndCombine(NLGF67w_mouse1_rep1, binMatrix = a))
